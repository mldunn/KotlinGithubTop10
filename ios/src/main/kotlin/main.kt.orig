import kotlinx.cinterop.*
import platform.Foundation.*
import platform.UIKit.*

fun main(args: Array<String>) {
    memScoped {
        val argc = args.size + 1
        val argv = (arrayOf("konan") + args).map { it.cstr.getPointer(memScope) }.toCValues()
        autoreleasepool {
            UIApplicationMain(argc, argv, null, NSStringFromClass(AppDelegate))
        }
    }
}
class AppDelegate : UIResponder(), UIApplicationDelegateProtocol {
    companion object : UIResponderMeta(), UIApplicationDelegateProtocolMeta {}
    override fun init() = initBy(AppDelegate())
    private var _window: UIWindow? = null
    override fun window() = _window
    override fun setWindow(window: UIWindow?) { _window = window }
}
@ExportObjCClass
class ViewController : UIViewController {
    constructor(aDecoder: NSCoder) : super(aDecoder)
    override fun initWithCoder(aDecoder: NSCoder) = initBy(ViewController(aDecoder))
<<<<<<< HEAD

    @ObjCOutlet
    lateinit var label: UILabel

    @ObjCOutlet
    lateinit var textField: UITextField

    @ObjCOutlet
    lateinit var button: UIButton

    @ObjCOutlet
    lateinit var repoListView: UITableView

    @ObjCAction
    fun buttonPressed(sender: ObjCObject?) {
        label.text = "Kotlin says: 'Hello, ${textField.text}!'"
        // repoListView
    }
}

class
=======
    @ObjCOutlet
    lateinit var label: UILabel
    @ObjCOutlet
    lateinit var textField: UITextField
    @ObjCOutlet
    lateinit var button: UIButton
    @ObjCAction
    fun buttonPressed(sender: ObjCObject?) {
        label.text = "Kotlin says: 'Hello, ${textField.text}!'"
    }
}
>>>>>>> 067b62df9b83fa155fe33a889cc488434f850ca9
